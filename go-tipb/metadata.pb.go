// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: metadata.proto

package tipb

import (
	"fmt"

	proto "github.com/golang/protobuf/proto"

	math "math"

	github_com_golang_protobuf_proto "github.com/golang/protobuf/proto"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GroupingMode int32

const (
	GroupingMode_ModeBitAnd     GroupingMode = 1
	GroupingMode_ModeNumericCmp GroupingMode = 2
	GroupingMode_ModeNumericSet GroupingMode = 3
)

var GroupingMode_name = map[int32]string{
	1: "ModeBitAnd",
	2: "ModeNumericCmp",
	3: "ModeNumericSet",
}
var GroupingMode_value = map[string]int32{
	"ModeBitAnd":     1,
	"ModeNumericCmp": 2,
	"ModeNumericSet": 3,
}

func (x GroupingMode) Enum() *GroupingMode {
	p := new(GroupingMode)
	*p = x
	return p
}
func (x GroupingMode) String() string {
	return proto.EnumName(GroupingMode_name, int32(x))
}
func (x *GroupingMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(GroupingMode_value, data, "GroupingMode")
	if err != nil {
		return err
	}
	*x = GroupingMode(value)
	return nil
}
func (GroupingMode) EnumDescriptor() ([]byte, []int) { return fileDescriptorMetadata, []int{0} }

type InUnionMetadata struct {
	InUnion          bool   `protobuf:"varint,1,req,name=in_union,json=inUnion" json:"in_union"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *InUnionMetadata) Reset()                    { *m = InUnionMetadata{} }
func (m *InUnionMetadata) String() string            { return proto.CompactTextString(m) }
func (*InUnionMetadata) ProtoMessage()               {}
func (*InUnionMetadata) Descriptor() ([]byte, []int) { return fileDescriptorMetadata, []int{0} }

func (m *InUnionMetadata) GetInUnion() bool {
	if m != nil {
		return m.InUnion
	}
	return false
}

type CompareInMetadata struct {
	HasNull bool `protobuf:"varint,1,req,name=has_null,json=hasNull" json:"has_null"`
	// consts represents all non-null const args in repeated Datum format.
	Consts           []byte `protobuf:"bytes,2,opt,name=consts" json:"consts,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CompareInMetadata) Reset()                    { *m = CompareInMetadata{} }
func (m *CompareInMetadata) String() string            { return proto.CompactTextString(m) }
func (*CompareInMetadata) ProtoMessage()               {}
func (*CompareInMetadata) Descriptor() ([]byte, []int) { return fileDescriptorMetadata, []int{1} }

func (m *CompareInMetadata) GetHasNull() bool {
	if m != nil {
		return m.HasNull
	}
	return false
}

func (m *CompareInMetadata) GetConsts() []byte {
	if m != nil {
		return m.Consts
	}
	return nil
}

type GroupingMark struct {
	GroupingNums     []uint64 `protobuf:"varint,1,rep,name=grouping_nums,json=groupingNums" json:"grouping_nums,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *GroupingMark) Reset()                    { *m = GroupingMark{} }
func (m *GroupingMark) String() string            { return proto.CompactTextString(m) }
func (*GroupingMark) ProtoMessage()               {}
func (*GroupingMark) Descriptor() ([]byte, []int) { return fileDescriptorMetadata, []int{2} }

func (m *GroupingMark) GetGroupingNums() []uint64 {
	if m != nil {
		return m.GroupingNums
	}
	return nil
}

type GroupingFunctionMetadata struct {
	Mode *GroupingMode `protobuf:"varint,1,req,name=mode,enum=tipb.GroupingMode" json:"mode,omitempty"`
	// 2 dimension here, out-most dimension is for grouping(a,b) = grouping(a) << 1 + grouping(b); we should maintain a slice of grouping mark.
	GroupingMarks    []*GroupingMark `protobuf:"bytes,2,rep,name=grouping_marks,json=groupingMarks" json:"grouping_marks,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *GroupingFunctionMetadata) Reset()         { *m = GroupingFunctionMetadata{} }
func (m *GroupingFunctionMetadata) String() string { return proto.CompactTextString(m) }
func (*GroupingFunctionMetadata) ProtoMessage()    {}
func (*GroupingFunctionMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptorMetadata, []int{3}
}

func (m *GroupingFunctionMetadata) GetMode() GroupingMode {
	if m != nil && m.Mode != nil {
		return *m.Mode
	}
	return GroupingMode_ModeBitAnd
}

func (m *GroupingFunctionMetadata) GetGroupingMarks() []*GroupingMark {
	if m != nil {
		return m.GroupingMarks
	}
	return nil
}

func init() {
	proto.RegisterType((*InUnionMetadata)(nil), "tipb.InUnionMetadata")
	proto.RegisterType((*CompareInMetadata)(nil), "tipb.CompareInMetadata")
	proto.RegisterType((*GroupingMark)(nil), "tipb.GroupingMark")
	proto.RegisterType((*GroupingFunctionMetadata)(nil), "tipb.GroupingFunctionMetadata")
	proto.RegisterEnum("tipb.GroupingMode", GroupingMode_name, GroupingMode_value)
}
func (m *InUnionMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InUnionMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	if m.InUnion {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CompareInMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompareInMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	if m.HasNull {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	if m.Consts != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Consts)))
		i += copy(dAtA[i:], m.Consts)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GroupingMark) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupingMark) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GroupingNums) > 0 {
		for _, num := range m.GroupingNums {
			dAtA[i] = 0x8
			i++
			i = encodeVarintMetadata(dAtA, i, uint64(num))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GroupingFunctionMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupingFunctionMetadata) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mode == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(*m.Mode))
	}
	if len(m.GroupingMarks) > 0 {
		for _, msg := range m.GroupingMarks {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMetadata(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintMetadata(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *InUnionMetadata) Size() (n int) {
	var l int
	_ = l
	n += 2
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CompareInMetadata) Size() (n int) {
	var l int
	_ = l
	n += 2
	if m.Consts != nil {
		l = len(m.Consts)
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupingMark) Size() (n int) {
	var l int
	_ = l
	if len(m.GroupingNums) > 0 {
		for _, e := range m.GroupingNums {
			n += 1 + sovMetadata(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupingFunctionMetadata) Size() (n int) {
	var l int
	_ = l
	if m.Mode != nil {
		n += 1 + sovMetadata(uint64(*m.Mode))
	}
	if len(m.GroupingMarks) > 0 {
		for _, e := range m.GroupingMarks {
			l = e.Size()
			n += 1 + l + sovMetadata(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMetadata(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMetadata(x uint64) (n int) {
	return sovMetadata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InUnionMetadata) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InUnionMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InUnionMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InUnion", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InUnion = bool(v != 0)
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompareInMetadata) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompareInMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompareInMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasNull", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasNull = bool(v != 0)
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consts", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Consts = append(m.Consts[:0], dAtA[iNdEx:postIndex]...)
			if m.Consts == nil {
				m.Consts = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupingMark) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupingMark: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupingMark: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMetadata
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GroupingNums = append(m.GroupingNums, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMetadata
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMetadata
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMetadata
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GroupingNums = append(m.GroupingNums, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupingNums", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupingFunctionMetadata) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupingFunctionMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupingFunctionMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var v GroupingMode
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (GroupingMode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Mode = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupingMarks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupingMarks = append(m.GroupingMarks, &GroupingMark{})
			if err := m.GroupingMarks[len(m.GroupingMarks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetadata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMetadata
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMetadata
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMetadata(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMetadata = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetadata   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("metadata.proto", fileDescriptorMetadata) }

var fileDescriptorMetadata = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x8f, 0xcf, 0x4a, 0xeb, 0x40,
	0x18, 0xc5, 0x3b, 0x6d, 0xb8, 0xb7, 0x7c, 0xb7, 0x37, 0xd6, 0x41, 0x25, 0xb8, 0x48, 0x4b, 0x04,
	0x89, 0x2e, 0x22, 0xd4, 0x95, 0x4b, 0x5b, 0xa8, 0x14, 0x6c, 0x91, 0x88, 0xeb, 0x32, 0x4d, 0x42,
	0x3a, 0x34, 0x33, 0x13, 0xe6, 0xcf, 0xd2, 0xf7, 0xf0, 0x91, 0xba, 0xf4, 0x09, 0x44, 0xea, 0x8b,
	0xc8, 0xa4, 0x7f, 0x68, 0x75, 0x35, 0x73, 0xce, 0x37, 0xe7, 0x3b, 0xbf, 0x01, 0x97, 0x65, 0x9a,
	0xa4, 0x44, 0x93, 0xa8, 0x94, 0x42, 0x0b, 0xec, 0x68, 0x5a, 0xce, 0xce, 0x4f, 0x72, 0x91, 0x8b,
	0xca, 0xb8, 0xb1, 0xb7, 0xf5, 0x2c, 0xe8, 0xc1, 0xd1, 0x88, 0xbf, 0x70, 0x2a, 0xf8, 0x78, 0x13,
	0xc2, 0x1d, 0x68, 0x52, 0x3e, 0x35, 0xd6, 0xf3, 0x50, 0xb7, 0x1e, 0x36, 0xfb, 0xce, 0xf2, 0xa3,
	0x53, 0x8b, 0xff, 0xd2, 0xf5, 0xc3, 0xe0, 0x11, 0x8e, 0x07, 0x82, 0x95, 0x44, 0x66, 0xa3, 0x83,
	0xd4, 0x9c, 0xa8, 0x29, 0x37, 0x45, 0x71, 0x98, 0x9a, 0x13, 0x35, 0x31, 0x45, 0x81, 0xcf, 0xe0,
	0x4f, 0x22, 0xb8, 0xd2, 0xca, 0xab, 0x77, 0x51, 0xd8, 0x8a, 0x37, 0x2a, 0xb8, 0x85, 0xd6, 0x83,
	0x14, 0xa6, 0xa4, 0x3c, 0x1f, 0x13, 0xb9, 0xc0, 0x17, 0xf0, 0x3f, 0xdf, 0xe8, 0x29, 0x37, 0x4c,
	0x79, 0xa8, 0xdb, 0x08, 0x9d, 0xb8, 0xb5, 0x35, 0x27, 0x86, 0xa9, 0xe0, 0x15, 0xbc, 0x6d, 0x68,
	0x68, 0x78, 0xa2, 0xf7, 0xf9, 0x2f, 0xc1, 0x61, 0x22, 0xcd, 0x2a, 0x0a, 0xb7, 0x87, 0x23, 0xfb,
	0xfb, 0x68, 0x57, 0x21, 0xd2, 0x2c, 0xae, 0xe6, 0xf8, 0x0e, 0xdc, 0x5d, 0x11, 0x23, 0x72, 0x61,
	0xc1, 0x1a, 0xe1, 0xbf, 0x5f, 0x09, 0x22, 0x17, 0xf1, 0x0e, 0xc9, 0x2a, 0x75, 0x3d, 0xdc, 0x63,
	0xb6, 0xab, 0x5c, 0x00, 0x7b, 0xf6, 0xa9, 0xbe, 0xe7, 0x69, 0x1b, 0x61, 0x0c, 0xae, 0xd5, 0x13,
	0xc3, 0x32, 0x49, 0x93, 0x01, 0x2b, 0xdb, 0xf5, 0x1f, 0xde, 0x73, 0xa6, 0xdb, 0x8d, 0xfe, 0xd5,
	0x72, 0xe5, 0xa3, 0xf7, 0x95, 0x8f, 0x3e, 0x57, 0x3e, 0x7a, 0xfb, 0xf2, 0x6b, 0x70, 0x9a, 0x08,
	0x16, 0xd9, 0xbd, 0x09, 0x29, 0x23, 0x4d, 0xd3, 0x59, 0x05, 0xf3, 0x84, 0xbe, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x9b, 0xa0, 0x1a, 0x97, 0xd5, 0x01, 0x00, 0x00,
}
